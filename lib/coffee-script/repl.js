// Generated by IcedCoffeeScript 112.8.0
(function() {
  var Await, merge, ref, updateSyntaxError;

  let fs = require('fs');

  let path = require('path');

  let vm = require('vm');

  let nodeREPL = require('repl');

  let CoffeeScript = require('./coffee-script');

  ref = require('./helpers'), merge = ref.merge, updateSyntaxError = ref.updateSyntaxError;

  let iced = require('iced-runtime-3');

  Await = require('./nodes').Await;

  let containsAwait = function(ast) {
    let found = false;
    ast.traverseChildren(true, function(n) {
      if (n instanceof Await) {
        return found = true;
      }
    });
    return found;
  };

  let replDefaults = {
    prompt: 'iced3> ',
    historyFile: process.env.HOME ? path.join(process.env.HOME, '.iced_history') : void 0,
    historyMaxInputSize: 10240,
    "eval": function(input, context, filename, cb) {
      // XXX: multiline hack.
      var Assign, Block, Literal, Value, err, ref1, token;
      input = input.replace(/\uFF00/g, '\n');
      // Node's REPL sends the input ending with a newline and then wrapped in
      // parens. Unwrap all that.
      input = input.replace(/^\(([\s\S]*)\n\)$/m, '$1');
      // Node's REPL v6.9.1+ sends the input wrapped in a try/catch statement.
      // Unwrap that too.
      input = input.replace(/^\s*try\s*{([\s\S]*)}\s*catch.*$/m, '$1');
      // Require AST nodes to do some AST manipulation.
      ref1 = require('./nodes'), Block = ref1.Block, Assign = ref1.Assign, Value = ref1.Value, Literal = ref1.Literal;
      // iced runtime in place for iced features....
      context.iced = iced;
      context[iced["const"].k_noop] = function() {};
      try {
        // Tokenize the clean input.
        let tokens = CoffeeScript.tokens(input);
        // Collect referenced variable names just like in `CoffeeScript.compile`.
        let referencedVars = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = tokens.length; i < len; i++) {
            token = tokens[i];
            if (token[0] === 'IDENTIFIER') {
              results.push(token[1]);
            }
          }
          return results;
        })();
        // Generate the AST of the tokens.
        let ast = CoffeeScript.nodes(tokens);
        // Add assignment to `_` variable to force the input to be an expression.
        if (!containsAwait(ast)) {
          ast = new Block([new Assign(new Value(new Literal('_')), ast, '=')]);
        }
        let js = ast.compile({
          bare: true,
          locals: Object.keys(context),
          referencedVars: referencedVars
        });
        return cb(null, runInContext(js, context, filename));
      } catch (error) {
        // AST's `compile` does not add source code information to syntax errors.
        err = error;
        updateSyntaxError(err, input);
        return cb(err);
      }
    }
  };

  let runInContext = function(js, context, filename) {
    if (context === global) {
      return vm.runInThisContext(js, filename);
    } else {
      return vm.runInContext(js, context, filename);
    }
  };

  let addMultilineHandler = function(repl) {
    var inputStream, outputStream, ref1, rli;
    rli = repl.rli, inputStream = repl.inputStream, outputStream = repl.outputStream;
    // Node 0.11.12 changed API, prompt is now _prompt.
    let origPrompt = (ref1 = repl._prompt) != null ? ref1 : repl.prompt;
    let multiline = {
      enabled: false,
      initialPrompt: origPrompt.replace(/^[^> ]*/, function(x) {
        return x.replace(/./g, '-');
      }),
      prompt: origPrompt.replace(/^[^> ]*>?/, function(x) {
        return x.replace(/./g, '.');
      }),
      buffer: ''
    };
    // Proxy node's line listener
    let nodeLineListener = rli.listeners('line')[0];
    rli.removeListener('line', nodeLineListener);
    rli.on('line', function(cmd) {
      if (multiline.enabled) {
        multiline.buffer += cmd + "\n";
        rli.setPrompt(multiline.prompt);
        rli.prompt(true);
      } else {
        rli.setPrompt(origPrompt);
        nodeLineListener(cmd);
      }
    });
    // Handle Ctrl-v
    return inputStream.on('keypress', function(char, key) {
      if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'v')) {
        return;
      }
      if (multiline.enabled) {
        // allow arbitrarily switching between modes any time before multiple lines are entered
        if (!multiline.buffer.match(/\n/)) {
          multiline.enabled = !multiline.enabled;
          rli.setPrompt(origPrompt);
          rli.prompt(true);
          return;
        }
        // no-op unless the current line is empty
        if ((rli.line != null) && !rli.line.match(/^\s*$/)) {
          return;
        }
        // eval, print, loop
        multiline.enabled = !multiline.enabled;
        rli.line = '';
        rli.cursor = 0;
        rli.output.cursorTo(0);
        rli.output.clearLine(1);
        // XXX: multiline hack
        multiline.buffer = multiline.buffer.replace(/\n/g, '\uFF00');
        rli.emit('line', multiline.buffer);
        multiline.buffer = '';
      } else {
        multiline.enabled = !multiline.enabled;
        rli.setPrompt(multiline.initialPrompt);
        rli.prompt(true);
      }
    });
  };

  // Store and load command history from a file
  let addHistory = function(repl, filename, maxSize) {
    let lastLine = null;
    try {
      // Get file info and at most maxSize of command history
      let stat = fs.statSync(filename);
      let size = Math.min(maxSize, stat.size);
      // Read last `size` bytes from the file
      let readFd = fs.openSync(filename, 'r');
      let buffer = Buffer.alloc(size);
      fs.readSync(readFd, buffer, 0, size, stat.size - size);
      fs.closeSync(readFd);
      // Set the history on the interpreter
      repl.rli.history = buffer.toString().split('\n').reverse();
      // If the history file was truncated we should pop off a potential partial line
      if (stat.size > maxSize) {
        repl.rli.history.pop();
      }
      // Shift off the final blank newline
      if (repl.rli.history[0] === '') {
        repl.rli.history.shift();
      }
      repl.rli.historyIndex = -1;
      lastLine = repl.rli.history[0];
    } catch (error) {}
    let fd = fs.openSync(filename, 'a');
    repl.rli.addListener('line', function(code) {
      if (code && code.length && code !== '.history' && code !== '.exit' && lastLine !== code) {
        // Save the latest command in the file
        fs.writeSync(fd, code + "\n");
        return lastLine = code;
      }
    });
    repl.on('exit', function() {
      return fs.closeSync(fd);
    });
    // Add a command to show the history stack
    return repl.commands[getCommandId(repl, 'history')] = {
      help: 'Show command history',
      action: function() {
        repl.outputStream.write((repl.rli.history.slice(0).reverse().join('\n')) + "\n");
        return repl.displayPrompt();
      }
    };
  };

  let getCommandId = function(repl, commandName) {
    // Node 0.11 changed API, a command such as '.help' is now stored as 'help'
    let commandsHaveLeadingDot = repl.commands['.help'] != null;
    if (commandsHaveLeadingDot) {
      return "." + commandName;
    } else {
      return commandName;
    }
  };

  module.exports = {
    start: function(opts) {
      var build, major, minor, ref1;
      if (opts == null) {
        opts = {};
      }
      ref1 = process.versions.node.split('.').map(function(n) {
        return parseInt(n, 10);
      }), major = ref1[0], minor = ref1[1], build = ref1[2];
      if (major === 0 && minor < 8) {
        console.warn("Node 0.8.0+ required for CoffeeScript REPL");
        process.exit(1);
      }
      CoffeeScript.register();
      process.argv = ['coffee'].concat(process.argv.slice(2));
      opts = merge(replDefaults, opts);
      let repl = nodeREPL.start(opts);
      if (opts.prelude) {
        runInContext(opts.prelude, repl.context, 'prelude');
      }
      repl.on('exit', function() {
        if (!repl.rli.closed) {
          return repl.outputStream.write('\n');
        }
      });
      addMultilineHandler(repl);
      if (opts.historyFile) {
        addHistory(repl, opts.historyFile, opts.historyMaxInputSize);
      }
      // Adapt help inherited from the node REPL
      repl.commands[getCommandId(repl, 'load')].help = 'Load code from a file into this REPL session';
      return repl;
    }
  };

}).call(this);
