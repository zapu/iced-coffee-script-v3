// Generated by IcedCoffeeScript 112.8.0
// `cake` is a simplified version of [Make](http://www.gnu.org/software/make/)
// ([Rake](http://rake.rubyforge.org/), [Jake](https://github.com/280north/jake))
// for CoffeeScript. You define tasks with names and descriptions in a Cakefile,
// and can call them from the command line, or invoke them from other tasks.
//
// Running `cake` with no arguments will print out a list of all the tasks in the
// current directory's Cakefile.
// External dependencies.
(function() {
  let fs = require('fs');

  let path = require('path');

  let helpers = require('./helpers');

  let optparse = require('./optparse');

  let CoffeeScript = require('./coffee-script');

  // Register .coffee extension
  CoffeeScript.register();

  // Keep track of the list of defined tasks, the accepted options, and so on.
  let tasks = {};

  let options = {};

  let switches = [];

  let oparse = null;

  // Mixin the top-level Cake functions for Cakefiles to use directly.
  helpers.extend(global,  /* Define a Cake task with a short name, an optional sentence description, */  /* and the function to run as the action itself. */ {
    task: function(name, description, action) {
      var ref;
      if (!action) {
        ref = [description, action], action = ref[0], description = ref[1];
      }
      return tasks[name] = {
        name: name,
        description: description,
        action: action
      };
    },
    // Define an option that the Cakefile accepts. The parsed options hash,
    // containing all of the command-line options passed, will be made available
    // as the first argument to the action.
    option: function(letter, flag, description) {
      return switches.push([letter, flag, description]);
    },
    // Invoke another task in the current Cakefile.
    invoke: function(name) {
      if (!tasks[name]) {
        missingTask(name);
      }
      return tasks[name].action(options);
    }
  });

  // Run `cake`. Executes all of the tasks you pass, in order. Note that Node's
  // asynchrony may cause tasks to execute in a different order than you'd expect.
  // If no tasks are passed, print the help screen. Keep a reference to the
  // original directory name, when running Cake tasks from subdirectories.
  exports.run = function() {
    var arg, e, i, len, ref, results;
    global.__originalDirname = fs.realpathSync('.');
    process.chdir(cakefileDirectory(__originalDirname));
    let args = process.argv.slice(2);
    CoffeeScript.run(fs.readFileSync('Cakefile').toString(), {
      filename: 'Cakefile'
    });
    oparse = new optparse.OptionParser(switches);
    if (!args.length) {
      return printTasks();
    }
    try {
      options = oparse.parse(args);
    } catch (error) {
      e = error;
      return fatalError("" + e);
    }
    ref = options["arguments"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      arg = ref[i];
      results.push(invoke(arg));
    }
    return results;
  };

  // Display the list of Cake tasks in a format similar to `rake -T`
  let printTasks = function() {
    var name, task;
    let relative = path.relative || path.resolve;
    let cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
    console.log(cakefilePath + " defines the following tasks:\n");
    for (name in tasks) {
      task = tasks[name];
      let spaces = 20 - name.length;
      spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
      let desc = task.description ? "# " + task.description : '';
      console.log("cake " + name + spaces + " " + desc);
    }
    if (switches.length) {
      return console.log(oparse.help());
    }
  };

  // Print an error and exit when attempting to use an invalid task/option.
  let fatalError = function(message) {
    console.error(message + '\n');
    console.log('To see a list of all tasks/options, run "cake"');
    return process.exit(1);
  };

  let missingTask = function(task) {
    return fatalError("No such task: " + task);
  };

  // When `cake` is invoked, search in the current and all parent directories
  // to find the relevant Cakefile.
  let cakefileDirectory = function(dir) {
    if (fs.existsSync(path.join(dir, 'Cakefile'))) {
      return dir;
    }
    let parent = path.normalize(path.join(dir, '..'));
    if (parent !== dir) {
      return cakefileDirectory(parent);
    }
    throw new Error("Cakefile not found in " + (process.cwd()));
  };

}).call(this);
