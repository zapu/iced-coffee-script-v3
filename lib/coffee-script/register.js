// Generated by IcedCoffeeScript 112.8.0
(function() {
  var ext, fork, i, len, ref;

  let CoffeeScript = require('./coffee-script');

  let child_process = require('child_process');

  let helpers = require('./helpers');

  let path = require('path');

  // Load and run a CoffeeScript file for Node, stripping any `BOM`s.
  let loadFile = function(module, filename) {
    let answer = CoffeeScript._compileFile(filename, false, true);
    return module._compile(answer, filename);
  };

  // If the installed version of Node supports `require.extensions`, register
  // CoffeeScript as an extension.
  if (require.extensions) {
    ref = CoffeeScript.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) {
      ext = ref[i];
      require.extensions[ext] = loadFile;
    }
    // Patch Node's module loader to be able to handle multi-dot extensions.
    // This is a horrible thing that should not be required.
    let Module = require('module');
    let findExtension = function(filename) {
      let extensions = path.basename(filename).split('.');
      // Remove the initial dot from dotfiles.
      if (extensions[0] === '') {
        extensions.shift();
      }
      // Start with the longest possible extension and work our way shortwards.
      while (extensions.shift()) {
        let curExtension = '.' + extensions.join('.');
        if (Module._extensions[curExtension]) {
          return curExtension;
        }
      }
      return '.js';
    };
    Module.prototype.load = function(filename) {
      this.filename = filename;
      this.paths = Module._nodeModulePaths(path.dirname(filename));
      let extension = findExtension(filename);
      Module._extensions[extension](this, filename);
      return this.loaded = true;
    };
  }

  // If we're on Node, patch `child_process.fork` so that Coffee scripts are able
  // to fork both CoffeeScript files, and JavaScript files, directly.
  if (child_process) {
    fork = child_process.fork;
    try {
      let binary = require.resolve('../../bin/coffee');
      child_process.fork = function(path, args, options) {
        if (helpers.isCoffee(path)) {
          if (!Array.isArray(args)) {
            options = args || {};
            args = [];
          }
          args = [path].concat(args);
          path = binary;
        }
        return fork(path, args, options);
      };
    } catch (error) {}
  }

}).call(this);
